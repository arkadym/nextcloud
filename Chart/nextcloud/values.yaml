## Default values for nextcloud Helm Chart.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

## Default values for nextcloud
##
nextcloud:
  replicas: 1

  ## Image configuration.
  image:
    repository: "nextcloud"
    tag: "latest"
    # pullPolicy: "IfNotPresent"
    # pullSecret: "secret-name"

  ## Resource configuration.
  resources:
    requests:
      memory: "256Mi" 
      cpu: "300m"
    limits:
      memory: "2Gi"
      cpu: "2"

  ## only set db values if use existing database deployment
  ##
  # dbHost: "nextcloud-db-server"
  # dbDatabase: "nextcloud-db"
  # dbUsername: "nextcloud-user"
  # dbPassword: "not-a-password"

  ## config
  ## sessionToken - A random string used in security hashing methods.
  ## serverName - FQDN of redmine instance
  ## email - section to define R&R ActionMailer for redmine
  ## - tls - will set enable_starttls_auto = true
  config:
    serverName: "nextcloud.domain.tld"
    # dataDirectory: /data
    email:
      address: "smtp.domain.tld"
      port: 587
      username: "user"
      password: "password"
      from: no-reply@domain.tld
      tls: true
    ## admin user account
    admin:
      username: admin
      # password: "not-a-password"

  ## persistent store for files
  ## pvc - Use k8s persistent volume
  ## - existingClaim - (non empty) use existing volume, other values are ignored
  ## - accessMode, size, storageClass (existingClaim must be empty) - create new claim with auto provision
  ## - storageClass - put "-" for empty (will use default configured by k8s)
  persistence:
    enabled: true
#    accessMode: "ReadWriteOnce"
#    size: "10Gi"
#    storageClass: "-"
#    existingClaim: "nextcloud-www"

  dataVolume: 
    enabled: false
    # accessMode: "ReadWriteOnce"
    # size: "1000Gi"
    # storageClass: "-"
    # existingClaim: "nextcloud-data"
    # pvSpec:
    #   nfs:
    #     server: 192.168.1.2
    #     path: /export/data

  extraVolumes: {}
    # - name: data
    #   accessMode: "ReadWriteMany"
    #   size: "100Gi"
    #   storageClass: "-"
    #   existingClaim: "extra-vol"
    #   pvSpec:
    #     nfs:
    #       server: 192.168.1.2
    #       path: /export/extra_vol
    
  ## Service configuration.
  ##
  service:
    type: "ClusterIP"
#    port: "80"

  ## Ingress settings
  ## tls - true will enable: 
  ## - tlsSecretName configured - will use custom SSL cert
  ## - letsEncrypt enabled - will use LE
  ## Check/Set:
  ## - config - serverName
  ## - config - custom.config.php for protocol in case SSL/TLS used
  ingress:
    enabled: true
    tls: true
#    tlsSecretName: ""
    annotations: {}
      ## letsEncrypt - cert-manager
      # certmanager.k8s.io/cluster-issuer: letsencrypt
      # kubernetes.io/tls-acme: 'true'
      # nginx.ingress.kubernetes.io/tls-acme: 'true'
      ## max upload size for nginx ingress
      # nginx.ingress.kubernetes.io/proxy-body-size: "100G"

  extraIngresses: 
    - name: "extra1"
      serverName: "extra.domain.tld"
      tls: true
      # tlsSecretName: ""
      annotations: {}
        # certmanager.k8s.io/cluster-issuer: letsencrypt
        # kubernetes.io/tls-acme: 'true'
        # nginx.ingress.kubernetes.io/tls-acme: 'true'
        # nginx.ingress.kubernetes.io/proxy-body-size: "100G"

  # Default config files
  # IMPORTANT: Will be used only if you put extra configs, otherwise default will come from nextcloud itself
  # Default confgurations can be found here: https://github.com/nextcloud/docker/tree/master/16.0/apache/config
  defaultConfigs:
    # To protect /var/www/html/config
    .htaccess: true
    # Apache configuration for rewrite urls
    apache-pretty-urls.config.php: true
    # Redis default configuration
    redis.config.php: false
    # Define APCu as local cache
    apcu.config.php: true
    # Apps directory configs
    apps.config.php: true
    # Used for auto configure database
    autoconfig.php: true
    # SMTP default configuration
    smtp.config.php: true
  # Extra config files created in /var/www/html/config/
  # ref: https://docs.nextcloud.com/server/15/admin_manual/configuration_server/config_sample_php_parameters.html#multiple-config-php-file
  # CAN_INSTAL is temp file to be remove once Nextcloud setup finished
  configs: {}
    # custom.config.php: |-
    #   <?php
    #   $CONFIG = array (
    #     'overwriteprotocol' => 'https',
    #   ); 
    # CAN_INSTALL: ""

  readinessProbe:
    enabled: true
    initialDelaySeconds: 300
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 10
    successThreshold: 1
  livenessProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 10
    successThreshold: 1

  nodeSelector: {}

  tolerations: []

  affinity: {}

  cronjob:
    enabled: false

    image:
      repository: "curlimages/curl"
      tag: "latest"
      # pullPolicy: "IfNotPresent"
      # pullSecret: "secret-name"

    resources: {}
      # requests:
      #   memory: "256Mi" 
      #   cpu: "300m"
      # limits:
      #   memory: "2Gi"
      #   cpu: "2"

    # curlInsecure: false
    schedule: "*/5 * * * *" # every 5 min
    successfulJobsHistoryLimit: 1
    failedJobsHistoryLimit: 1
    backoffLimit: 0

## Default values for Database.
##
database:
  enabled: true

  image:
    tag: "10.5"

  rootUser:
    password: ""
    forcePassword: false

  db:
    user: nextcloud-user
    password: ""
    forcePassword: false
    name: nextcloud

  volumePermissions:
    enabled: true
    image:
      repository: busybox
      tag: latest
      pullPolicy: "IfNotPresent"

    resources: {}

  securityContext:
    enabled: true
    runAsUser: 1001
    fsGroup: 1001

  replication:
    enabled: false

  master:
    nodeSelector: {}
    tolerations: []

    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"

    persistence:
      enabled: true
      #annotations: {}
      accessModes:
        - ReadWriteOnce
      size: 8Gi
      #existingClaim: "nextcloud-db"
    
    livenessProbe:
      failureThreshold: 10

    readinessProbe:
      failureThreshold: 10

  service:
    type: "ClusterIP"
#    port: "3306"

  tests:
    enabled: false

redis:
  enabled: false

  image:
    tag: "6.0.6"

  cluster:
    enabled: true
    slaveCount: 0

  sentinel: 
    enabled: true

    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        memory: "512Mi"
        cpu: "500m"

  master:
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        memory: "512Mi"
        cpu: "500m"

    persistence:
      enabled: true
      accessModes:
        - ReadWriteOnce
      size: 8Gi

  slave:
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        memory: "512Mi"
        cpu: "500m"

    persistence:
      enabled: true
      accessModes:
        - ReadWriteOnce
      size: 8Gi

  volumePermissions:
    enabled: true
    image:
      repository: busybox
      tag: latest
      pullPolicy: "IfNotPresent"

    resources: {}

  securityContext:
    enabled: true
    runAsUser: 1001
    fsGroup: 1001

onlyoffice:
  enabled: true

  secret:
    enabled: true
#    password: ""

  settings:
    serverName: "onlyoffice.domain.tld"
    maxDocumentSize: 200 # size in MB

  resources:
    requests:
      memory: "256Mi"
      cpu: "300m"
    limits:
      memory: "1Gi"
      cpu: "1"

  ## Ingress settings
  ## tls - true will enable: 
  ## - tlsSecretName configured - will use custom SSL cert
  ## - letsEncrypt enabled - will use LE
  ingress:
    enabled: true
    tls: true
#    tlsSecretName: ""
    letsEncrypt: true
    annotations: {}

elasticsearch:
  enabled: true

  ## options
  # password: "not-a-password"
  # clusterName: ""
  # nodeName: ""
  # javaOpts: ""

  # persistence:
  #   enabled: true
  #   accessModes:
  #     - ReadWriteOnce
  #   size: 30Gi

  resources:
    requests:
      memory: "256Mi"
      cpu: "300m"
    limits:
      memory: "1Gi"
      cpu: "1"

backup-db:
  enabled: true

  ## Image configuration.
  ##
  image:
    repository: "arkadym/kube-backup"
    tag: "1.22"

  database:
    mysql:
      server: "RELEASE-NAME-database"
      databases: "nextcloud" # space separated list of DBs to backup
      username: "nextcloud-user"
#      password: ""
      secret:
        name: "RELEASE-NAME-database"
#        userKey: ""
        passwordKey: "database-password"

  config:
    mode: backup # allowed values are: backup, sync
    cronSchedule: "0 5 * * *" # every day 5am
    backupDays: 5

backup-config:
  enabled: true

  ## Image configuration.
  ##
  image:
    repository: "arkadym/kube-backup"
    tag: "1.22"

  storage:
    azure: {} 
      # accountKey: "azure-account-key"
      # accountName: "azure-account-name"
      # containerName: "container-name"
      # prefix: ""

  folders:
    - name: nextcloud-data
      path: /var/www/html
      exclude:
      - data
      volume:
        persistentVolumeClaim:
          claimName: RELEASE-NAME-app

  config:
    mode: backup # allowed values are: backup, sync
    cronSchedule: "0 5 * * *" # every day 5am
    backupDays: 5

  persistence:
    enabled: true
    accessMode: "ReadWriteOnce"
    size: "10Gi"
    storageClass: "actonica-nfs1"

backup-data-sync:
  enabled: true

  ## Image configuration.
  ##
  image:
    repository: "arkadym/kube-backup"
    tag: "1.22"

  storage:
    azure: 
      accountKey: "azure-account-key"
      accountName: "azure-account-name"
      containerName: "container-name"
#      prefix: ""

  folders:
    - name: nextcloud-data
      path: /var/www/html/data
      subPath: data
      exclude: {}
      volume:
        persistentVolumeClaim:
          claimName: RELEASE-NAME-app

  config:
    mode: sync # allowed values are: backup, sync
    cronSchedule: "40 18 * * *" # every day 5am
